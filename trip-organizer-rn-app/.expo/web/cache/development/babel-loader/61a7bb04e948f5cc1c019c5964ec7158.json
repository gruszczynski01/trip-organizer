{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var AUTHENTICATE = \"AUTHENTICATE\";\nexport var LOGOUT = \"LOGOUT\";\nimport { auth, database } from \"../../firebase\";\nvar timer;\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT\n  };\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  console.log(\"Saving userData to AsyncStorage\");\n  AsyncStorage.setItem(\"userData\", JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};\n\nexport var signup = function signup(email, password, name, surname) {\n  return function _callee(dispatch) {\n    var response, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword(email, password).catch(function (error) {\n              var errorId = errorResData.error.message;\n\n              if (errorCode == \"auth/weak-password\") {\n                message = \"The password is too weak.\";\n              } else if (errorCode == \"auth/operation-not-allowed\") {\n                message = \"Operation not allowed.\";\n              } else if (errorCode == \"auth/invalid-email\") {\n                message = \"Email address is not valid.\";\n              } else if (errorCode == \"auth/email-already-in-use\") {\n                message = \"Address email already in use\";\n              } else {\n                message = errorMessage;\n              }\n\n              throw new Error(message);\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(JSON.parse(JSON.stringify(response)));\n\n          case 5:\n            resData = _context.sent;\n            dispatch(authenticate(resData.user.uid, resData.user.stsTokenManager.accessToken, parseInt(resData.user.stsTokenManager.expirationTime) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.user.stsTokenManager.expirationTime) * 1000);\n            saveDataToStorage(resData.user.uid, resData.user.uid, expirationDate);\n            dispatch(addUserToDatabase(resData.user.uid, email, name, surname));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(auth.signInWithEmailAndPassword(email, password).catch(function (error) {\n              var errorCode = error.code;\n              var errorMessage = error.message;\n\n              if (errorCode === \"auth/wrong-password\") {\n                message = \"Wrong password.\";\n              } else if (errorCode === \"auth/invalid-email\") {\n                message = \"Invalid email.\";\n              } else if (errorCode === \"auth/user-disabled\") {\n                message = \"User disabled.\";\n              } else if (errorCode === \"auth/user-not-found\") {\n                message = \"User not found.\";\n              } else {\n                message = errorMessage;\n              }\n\n              throw new Error(message);\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(JSON.parse(JSON.stringify(response)));\n\n          case 5:\n            resData = _context2.sent;\n            console.log(\"LOGGIN RESPONSE\");\n            console.log(resData);\n            dispatch(authenticate(resData.user.uid, resData.user.stsTokenManager.accessToken, parseInt(resData.user.stsTokenManager.expirationTime) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.user.stsTokenManager.expirationTime) * 1000);\n            saveDataToStorage(resData.user.stsTokenManager.accessToken, resData.user.uid, expirationDate);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar addUserToDatabase = function addUserToDatabase(id, email, name, surname) {\n  return function _callee3(dispatch, getState) {\n    var token, userId, response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.userId;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(database.ref(\"users/\" + userId).set({\n              email: email,\n              name: name,\n              surname: surname\n            }, function (error) {\n              if (error) {\n                console.log(\"LOG: trip-organizer-rn-app/store/actions/auth.js: Something went wrong with saving new user to database\");\n              } else {\n                console.log(\"LOG: trip-organizer-rn-app/store/actions/auth.js: Token has been saved in database\");\n              }\n            }));\n\n          case 4:\n            response = _context3.sent;\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/store/actions/auth.js"],"names":["AsyncStorage","AUTHENTICATE","LOGOUT","auth","database","timer","clearLogoutTimer","clearTimeout","logout","removeItem","type","setLogoutTimer","expirationTime","dispatch","setTimeout","authenticate","userId","token","expiryTime","saveDataToStorage","expirationDate","console","log","setItem","JSON","stringify","expiryDate","toISOString","signup","email","password","name","surname","createUserWithEmailAndPassword","catch","error","errorId","errorResData","message","errorCode","errorMessage","Error","response","parse","resData","user","uid","stsTokenManager","accessToken","parseInt","Date","getTime","addUserToDatabase","login","signInWithEmailAndPassword","code","id","getState","ref","set"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\n\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\nexport const AUTHENTICATE = \"AUTHENTICATE\";\nexport const LOGOUT = \"LOGOUT\";\nimport { auth, database } from \"../../firebase\";\n\nlet timer;\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer); //js function\n  }\n};\nexport const logout = () => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return { type: LOGOUT };\n};\nconst setLogoutTimer = (expirationTime) => {\n  return (dispatch) => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return (dispatch) => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  console.log(\"Saving userData to AsyncStorage\");\n  AsyncStorage.setItem(\n    \"userData\",\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString(),\n    })\n  );\n};\nexport const signup = (email, password, name, surname) => {\n  return async (dispatch) => {\n    const response = await auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch(function (error) {\n        const errorId = errorResData.error.message;\n        if (errorCode == \"auth/weak-password\") {\n          message = \"The password is too weak.\";\n        } else if (errorCode == \"auth/operation-not-allowed\") {\n          message = \"Operation not allowed.\";\n        } else if (errorCode == \"auth/invalid-email\") {\n          message = \"Email address is not valid.\";\n        } else if (errorCode == \"auth/email-already-in-use\") {\n          message = \"Address email already in use\";\n        } else {\n          message = errorMessage;\n        }\n        throw new Error(message);\n      });\n\n    const resData = await JSON.parse(JSON.stringify(response));\n    dispatch(\n      authenticate(\n        resData.user.uid,\n        resData.user.stsTokenManager.accessToken,\n        parseInt(resData.user.stsTokenManager.expirationTime) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() +\n        parseInt(resData.user.stsTokenManager.expirationTime) * 1000\n    );\n    saveDataToStorage(resData.user.uid, resData.user.uid, expirationDate);\n    dispatch(addUserToDatabase(resData.user.uid, email, name, surname));\n  };\n};\n\nexport const login = (email, password) => {\n  return async (dispatch) => {\n    const response = await auth\n      .signInWithEmailAndPassword(email, password)\n      .catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        if (errorCode === \"auth/wrong-password\") {\n          message = \"Wrong password.\";\n        } else if (errorCode === \"auth/invalid-email\") {\n          message = \"Invalid email.\";\n        } else if (errorCode === \"auth/user-disabled\") {\n          message = \"User disabled.\";\n        } else if (errorCode === \"auth/user-not-found\") {\n          message = \"User not found.\";\n        } else {\n          message = errorMessage;\n        }\n        throw new Error(message);\n      });\n\n    const resData = await JSON.parse(JSON.stringify(response));\n    console.log(\"LOGGIN RESPONSE\");\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.user.uid,\n        resData.user.stsTokenManager.accessToken,\n        parseInt(resData.user.stsTokenManager.expirationTime) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() +\n        parseInt(resData.user.stsTokenManager.expirationTime) * 1000\n    );\n    saveDataToStorage(\n      resData.user.stsTokenManager.accessToken,\n      resData.user.uid,\n      expirationDate\n    );\n  };\n};\n\nconst addUserToDatabase = (id, email, name, surname) => {\n  return async (dispatch, getState) => {\n    const token = getState().auth.token;\n    const userId = getState().auth.userId;\n\n    const response = await database.ref(\"users/\" + userId).set(\n      {\n        email: email,\n        name: name,\n        surname: surname,\n      },\n      function (error) {\n        if (error) {\n          console.log(\n            \"LOG: trip-organizer-rn-app/store/actions/auth.js: Something went wrong with saving new user to database\"\n          );\n        } else {\n          console.log(\n            \"LOG: trip-organizer-rn-app/store/actions/auth.js: Token has been saved in database\"\n          );\n        }\n      }\n    );\n  };\n};\n"]},"metadata":{},"sourceType":"module"}