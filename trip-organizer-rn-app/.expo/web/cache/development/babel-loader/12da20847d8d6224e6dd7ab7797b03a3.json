{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/node_modules/react-native-calendar-select/Month/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Moment from 'moment';\nimport styles from \"./style\";\nimport Day from \"../Day\";\n\nvar Month = function (_Component) {\n  _inherits(Month, _Component);\n\n  var _super = _createSuper(Month);\n\n  function Month(props) {\n    var _this;\n\n    _classCallCheck(this, Month);\n\n    _this = _super.call(this, props);\n    _this._getDayList = _this._getDayList.bind(_assertThisInitialized(_this));\n    _this._renderDayRow = _this._renderDayRow.bind(_assertThisInitialized(_this));\n    _this._getMonthText = _this._getMonthText.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Month, [{\n    key: \"_getMonthText\",\n    value: function _getMonthText() {\n      var _this$props = this.props,\n          month = _this$props.month,\n          today = _this$props.today,\n          i18n = _this$props.i18n;\n      var y = month.year();\n      var m = month.month();\n      var year = today.year();\n\n      if (year === y) {\n        return Month.I18N_MAP[i18n][m];\n      } else {\n        if (i18n === 'en') {\n          return Month.I18N_MAP[i18n][m] + \", \" + y;\n        }\n\n        return month.format('YYYY年M月');\n      }\n    }\n  }, {\n    key: \"_getDayList\",\n    value: function _getDayList(date) {\n      var dayList;\n      var month = date.month();\n      var weekday = date.isoWeekday();\n\n      if (weekday === 7) {\n        dayList = [];\n      } else {\n        dayList = new Array(weekday).fill({\n          empty: date.clone().subtract(1, 'h')\n        });\n      }\n\n      while (date.month() === month) {\n        dayList.push({\n          date: date.clone()\n        });\n        date.add(1, 'days');\n      }\n\n      date.subtract(1, 'days');\n      weekday = date.isoWeekday();\n\n      if (weekday === 7) {\n        return dayList.concat(new Array(6).fill({\n          empty: date.clone().hour(1)\n        }));\n      }\n\n      return dayList.concat(new Array(Math.abs(weekday - 6)).fill({\n        empty: date.clone().hour(1)\n      }));\n    }\n  }, {\n    key: \"_renderDayRow\",\n    value: function _renderDayRow(dayList, index) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          startDate = _this$props2.startDate,\n          endDate = _this$props2.endDate,\n          today = _this$props2.today;\n      return React.createElement(View, {\n        style: styles.dayRow,\n        key: 'row' + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, dayList.map(function (item, i) {\n        return React.createElement(Day, _extends({\n          date: item.date,\n          empty: item.empty\n        }, _this2.props, {\n          key: 'day' + i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }\n        }));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          month = _this$props3.month,\n          today = _this$props3.today,\n          color = _this$props3.color;\n      var subColor = {\n        color: color.subColor\n      };\n\n      var titleText = this._getMonthText();\n\n      var dayList = this._getDayList(month.clone());\n\n      var rowArray = new Array(dayList.length / 7).fill('');\n      return React.createElement(View, {\n        style: styles.month,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.monthTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: [styles.monthTitleText, subColor],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }, titleText)), React.createElement(View, {\n        style: styles.days,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, rowArray.map(function (item, i) {\n        return _this3._renderDayRow(dayList.slice(i * 7, i * 7 + 7), i);\n      })));\n    }\n  }]);\n\n  return Month;\n}(Component);\n\nMonth.I18N_MAP = {\n  'zh': ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\n  'jp': ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\n  'en': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nexport { Month as default };","map":{"version":3,"sources":["/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/node_modules/react-native-calendar-select/Month/index.js"],"names":["React","Component","PropTypes","Moment","styles","Day","Month","props","_getDayList","bind","_renderDayRow","_getMonthText","month","today","i18n","y","year","m","I18N_MAP","format","date","dayList","weekday","isoWeekday","Array","fill","empty","clone","subtract","push","add","concat","hour","Math","abs","index","startDate","endDate","dayRow","map","item","i","color","subColor","titleText","rowArray","length","monthTitle","monthTitleText","days","slice"],"mappings":"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","sourcesContent":["/**\n * Created by TinySymphony on 2017-05-11.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableHighlight\n} from 'react-native';\nimport Moment from 'moment';\nimport styles from './style';\nimport Day from '../Day';\n\nexport default class Month extends Component {\n  constructor (props) {\n    super(props);\n    this._getDayList = this._getDayList.bind(this);\n    this._renderDayRow = this._renderDayRow.bind(this);\n    this._getMonthText = this._getMonthText.bind(this);\n  }\n  static I18N_MAP = {\n    'zh': [\n      '一月', '二月', '三月', '四月', '五月', '六月',\n      '七月', '八月', '九月', '十月', '十一月', '十二月'\n    ],\n    'jp': [\n      '一月', '二月', '三月', '四月', '五月', '六月',\n      '七月', '八月', '九月', '十月', '十一月', '十二月'\n    ],\n    'en': [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ]\n  }\n  _getMonthText () {\n    const {\n      month,\n      today,\n      i18n\n    } = this.props;\n    let y = month.year();\n    let m = month.month();\n    let year = today.year();\n    if (year === y) {\n      return Month.I18N_MAP[i18n][m];\n    } else {\n      if (i18n === 'en') {\n        return `${Month.I18N_MAP[i18n][m]}, ${y}`;\n      }\n      return month.format('YYYY年M月');\n    }\n  }\n  _getDayList (date) {\n    let dayList;\n    let month = date.month();\n    let weekday = date.isoWeekday();\n    if (weekday === 7) {\n      dayList = [];\n    } else {\n      dayList = new Array(weekday).fill({\n        empty: date.clone().subtract(1, 'h')\n      });\n    }\n    while (date.month() === month) {\n      dayList.push({\n        date: date.clone()\n      });\n      date.add(1, 'days');\n    }\n    date.subtract(1, 'days');\n    weekday = date.isoWeekday();\n    if (weekday === 7) {\n      return dayList.concat(new Array(6).fill({\n        empty: date.clone().hour(1)\n      }));\n    }\n    return dayList.concat(new Array(Math.abs(weekday - 6)).fill({\n      empty: date.clone().hour(1)\n    }));\n  }\n  _renderDayRow (dayList, index) {\n    const {\n      startDate,\n      endDate,\n      today\n    } = this.props;\n    return (\n      <View style={styles.dayRow} key={'row' + index}>\n        {dayList.map((item, i) =>\n          <Day\n            date={item.date}\n            empty={item.empty}\n            {...this.props}\n            key={'day' + i}/>\n        )}\n      </View>\n    );\n  }\n  render () {\n    const {\n      month,\n      today,\n      color\n    } = this.props;\n    let subColor = {color: color.subColor};\n    let titleText = this._getMonthText();\n    let dayList = this._getDayList(month.clone());\n    let rowArray = new Array(dayList.length / 7).fill('');\n    return (\n      <View style={styles.month}>\n        <View style={styles.monthTitle}>\n          <Text style={[styles.monthTitleText, subColor]}>{titleText}</Text>\n        </View>\n        <View style={styles.days}>\n          {rowArray.map((item, i) =>\n            this._renderDayRow(dayList.slice(i * 7, i * 7 + 7), i)\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}