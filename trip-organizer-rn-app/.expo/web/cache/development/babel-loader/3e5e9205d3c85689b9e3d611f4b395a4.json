{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var ADD_TASK = \"ADD_TASK\";\nexport var EDIT_TASK = \"EDIT_TASK\";\nexport var GET_TRIP_TASKS = \"GET_TRIP_TASKS\";\nexport var DELETE_TASK = \"DELETE_TASK\";\nimport { auth, database } from \"../../firebase\";\nexport var addTask = function addTask(taskName, taskDescription, toDoList) {\n  return function _callee(dispatch, getState) {\n    var newEventKey, updates;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newEventKey = database.ref().child(\"events\").push().key;\n            updates = {};\n            updates[\"events/\" + newEventKey] = {\n              title: eventName,\n              description: eventDesc,\n              date: eventDate,\n              time: eventTime\n            };\n            updates[\"trips/\" + tripParent + \"/events/\" + newEventKey] = 1;\n            database.ref().update(updates);\n            dispatch({\n              type: ADD_EVENT,\n              eventData: {\n                title: eventName,\n                description: eventDesc,\n                date: eventDate,\n                time: eventTime\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var editTask = function editTask(taskId, taskName, taskDescription, taskIfDone, taskOwnerId) {\n  return function _callee2(dispatch, getState) {\n    var updates;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            updates = {};\n            updates[\"tasks/\" + taskId + \"/name\"] = taskName;\n            updates[\"tasks/\" + taskId + \"/description\"] = taskDescription;\n            updates[\"tasks/\" + taskId + \"/ifDone\"] = taskIfDone;\n            updates[\"tasks/\" + taskId + \"/owner\"] = taskOwnerId;\n            database.ref().update(updates);\n            dispatch({\n              type: EDIT_TASK,\n              taskData: {\n                id: taskId,\n                name: taskName,\n                description: taskDescription,\n                ifDone: taskIfDone,\n                owner: taskOwnerId\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getTasks = function getTasks(toDoListId) {\n  return function _callee7(dispatch, getState) {\n    var toDoListTasks, response;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            toDoListTasks = [];\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(database.ref(\"toDoLists/\" + toDoListId + \"/events\").once(\"value\").then(function _callee6(dataSnapshot) {\n              var data, key;\n              return _regeneratorRuntime.async(function _callee6$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      data = JSON.parse(JSON.stringify(dataSnapshot));\n                      _context6.t0 = _regeneratorRuntime.keys(data);\n\n                    case 2:\n                      if ((_context6.t1 = _context6.t0()).done) {\n                        _context6.next = 9;\n                        break;\n                      }\n\n                      key = _context6.t1.value;\n\n                      if (!data.hasOwnProperty(key)) {\n                        _context6.next = 7;\n                        break;\n                      }\n\n                      _context6.next = 7;\n                      return _regeneratorRuntime.awrap(function _callee5() {\n                        var taskId, nestedResponse;\n                        return _regeneratorRuntime.async(function _callee5$(_context5) {\n                          while (1) {\n                            switch (_context5.prev = _context5.next) {\n                              case 0:\n                                taskId = key;\n                                _context5.next = 3;\n                                return _regeneratorRuntime.awrap(database.ref(\"tasks/\" + taskId).once(\"value\").then(function _callee4(dataSnapshot) {\n                                  var taskData, secondNestedResponse;\n                                  return _regeneratorRuntime.async(function _callee4$(_context4) {\n                                    while (1) {\n                                      switch (_context4.prev = _context4.next) {\n                                        case 0:\n                                          taskData = JSON.parse(JSON.stringify(dataSnapshot));\n                                          _context4.next = 3;\n                                          return _regeneratorRuntime.awrap(database.ref(\"users/\" + taskData.owner).once(\"value\").then(function _callee3(user) {\n                                            var userData;\n                                            return _regeneratorRuntime.async(function _callee3$(_context3) {\n                                              while (1) {\n                                                switch (_context3.prev = _context3.next) {\n                                                  case 0:\n                                                    userData = JSON.parse(JSON.stringify(user));\n                                                    toDoListTasks.push(_objectSpread(_objectSpread({}, JSON.parse(JSON.stringify(dataSnapshot))), {}, {\n                                                      id: taskId,\n                                                      ownerName: userData.name + \" \" + userData.surname,\n                                                      showDetails: false\n                                                    }));\n\n                                                  case 2:\n                                                  case \"end\":\n                                                    return _context3.stop();\n                                                }\n                                              }\n                                            }, null, null, null, Promise);\n                                          }));\n\n                                        case 3:\n                                          secondNestedResponse = _context4.sent;\n\n                                        case 4:\n                                        case \"end\":\n                                          return _context4.stop();\n                                      }\n                                    }\n                                  }, null, null, null, Promise);\n                                }));\n\n                              case 3:\n                                nestedResponse = _context5.sent;\n\n                              case 4:\n                              case \"end\":\n                                return _context5.stop();\n                            }\n                          }\n                        }, null, null, null, Promise);\n                      }());\n\n                    case 7:\n                      _context6.next = 2;\n                      break;\n\n                    case 9:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 3:\n            response = _context7.sent;\n            dispatch({\n              type: GET_TRIP_TASKS,\n              toDoListTasks: toDoListTasks\n            });\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deleteEvent = function deleteEvent(eventId, tripId) {\n  return function _callee8(dispatch, getState) {\n    var tripToDeleteRef;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return _regeneratorRuntime.awrap(database.ref(\"events/\" + eventId).remove().then(function () {\n              console.log(\"Remove succeeded.\");\n            }).catch(function (error) {\n              console.log(\"Remove failed: \" + error.message);\n            }));\n\n          case 2:\n            tripToDeleteRef = _context8.sent;\n            _context8.next = 5;\n            return _regeneratorRuntime.awrap(database.ref(\"trips/\" + tripId + \"/events/\" + eventId).remove().then(function () {\n              console.log(\"Remove succeeded.\");\n            }).catch(function (error) {\n              console.log(\"Remove failed: \" + error.message);\n            }));\n\n          case 5:\n            eventToDeleteRef = _context8.sent;\n            dispatch({\n              type: DELETE_EVENT,\n              eventId: eventId\n            });\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/store/actions/tasks.js"],"names":["ADD_TASK","EDIT_TASK","GET_TRIP_TASKS","DELETE_TASK","auth","database","addTask","taskName","taskDescription","toDoList","dispatch","getState","newEventKey","ref","child","push","key","updates","title","eventName","description","eventDesc","date","eventDate","time","eventTime","tripParent","update","type","ADD_EVENT","eventData","editTask","taskId","taskIfDone","taskOwnerId","taskData","id","name","ifDone","owner","getTasks","toDoListId","toDoListTasks","once","then","dataSnapshot","data","JSON","parse","stringify","hasOwnProperty","user","userData","ownerName","surname","showDetails","secondNestedResponse","nestedResponse","response","deleteEvent","eventId","tripId","remove","console","log","catch","error","message","tripToDeleteRef","eventToDeleteRef","DELETE_EVENT"],"mappings":"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","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\nexport const EDIT_TASK = \"EDIT_TASK\";\nexport const GET_TRIP_TASKS = \"GET_TRIP_TASKS\";\nexport const DELETE_TASK = \"DELETE_TASK\";\n\nimport { auth, database } from \"../../firebase\";\n// import trips from \"../reducers/trips\";\n\nexport const addTask = (taskName, taskDescription, toDoList) => {\n  return async (dispatch, getState) => {\n    const newEventKey = database.ref().child(\"events\").push().key;\n\n    var updates = {};\n    updates[\"events/\" + newEventKey] = {\n      title: eventName,\n      description: eventDesc,\n      date: eventDate,\n      time: eventTime,\n    };\n    updates[\"trips/\" + tripParent + \"/events/\" + newEventKey] = 1;\n    database.ref().update(updates);\n\n    //te dwa pushe mozna przerobic do tablicy updates\n\n    dispatch({\n      type: ADD_EVENT,\n      eventData: {\n        title: eventName,\n        description: eventDesc,\n        date: eventDate,\n        time: eventTime,\n      },\n    });\n  };\n};\n\nexport const editTask = (\n  taskId,\n  taskName,\n  taskDescription,\n  taskIfDone,\n  taskOwnerId\n) => {\n  return async (dispatch, getState) => {\n    var updates = {};\n    updates[\"tasks/\" + taskId + \"/name\"] = taskName;\n    updates[\"tasks/\" + taskId + \"/description\"] = taskDescription;\n    updates[\"tasks/\" + taskId + \"/ifDone\"] = taskIfDone;\n    updates[\"tasks/\" + taskId + \"/owner\"] = taskOwnerId;\n\n    database.ref().update(updates);\n\n    dispatch({\n      type: EDIT_TASK,\n      taskData: {\n        id: taskId,\n        name: taskName,\n        description: taskDescription,\n        ifDone: taskIfDone,\n        owner: taskOwnerId,\n      },\n    });\n  };\n};\n\nexport const getTasks = (toDoListId) => {\n  return async (dispatch, getState) => {\n    let toDoListTasks = [];\n\n    const response = await database\n      .ref(\"toDoLists/\" + toDoListId + \"/events\")\n      .once(\"value\")\n      .then(async function (dataSnapshot) {\n        const data = JSON.parse(JSON.stringify(dataSnapshot));\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            const taskId = key;\n            const nestedResponse = await database\n              .ref(\"tasks/\" + taskId)\n              .once(\"value\")\n              .then(async function (dataSnapshot) {\n                const taskData = JSON.parse(JSON.stringify(dataSnapshot));\n                const secondNestedResponse = await database\n                  .ref(\"users/\" + taskData.owner)\n                  .once(\"value\")\n                  .then(async function (user) {\n                    const userData = JSON.parse(JSON.stringify(user));\n                    toDoListTasks.push({\n                      ...JSON.parse(JSON.stringify(dataSnapshot)),\n                      id: taskId,\n                      ownerName: userData.name + \" \" + userData.surname,\n                      showDetails: false,\n                    });\n                  });\n              });\n          }\n        }\n      });\n\n    dispatch({\n      type: GET_TRIP_TASKS,\n      toDoListTasks: toDoListTasks,\n    });\n  };\n};\n\nexport const deleteEvent = (eventId, tripId) => {\n  return async (dispatch, getState) => {\n    var tripToDeleteRef = await database\n      .ref(\"events/\" + eventId)\n      .remove()\n      .then(function () {\n        console.log(\"Remove succeeded.\");\n      })\n      .catch(function (error) {\n        console.log(\"Remove failed: \" + error.message);\n      });\n\n    eventToDeleteRef = await database\n      .ref(\"trips/\" + tripId + \"/events/\" + eventId)\n      .remove()\n      .then(function () {\n        console.log(\"Remove succeeded.\");\n      })\n      .catch(function (error) {\n        console.log(\"Remove failed: \" + error.message);\n      });\n\n    dispatch({\n      type: DELETE_EVENT,\n      eventId: eventId,\n    });\n  };\n};\n\n// Artykuł jak pobierac dane tripy dla jednego usera\n// https://medium.com/@justintulk/how-to-query-arrays-of-data-in-firebase-aa28a90181bad\n//\n"]},"metadata":{},"sourceType":"module"}