{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/node_modules/react-native-calendar-select/MonthList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PropTypes, Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ListView } from \"react-native-web/dist/index\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Moment from 'moment';\nimport styles from \"./CalendarStyle\";\nimport Month from \"./Month\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar MonthList = function (_Component) {\n  _inherits(MonthList, _Component);\n\n  var _super = _createSuper(MonthList);\n\n  function MonthList(props) {\n    var _this;\n\n    _classCallCheck(this, MonthList);\n\n    _this = _super.call(this, props);\n    _this.ds = new ListView.DataSource({\n      rowHasChanged: function rowHasChanged(r1, r2) {\n        return r2.shouldUpdate;\n      }\n    });\n    _this.monthList = [];\n    _this.state = {\n      dataSource: _this.ds.cloneWithRows(_this._getMonthList())\n    };\n    _this._renderMonth = _this._renderMonth.bind(_assertThisInitialized(_this));\n    _this._shouldUpdate = _this._shouldUpdate.bind(_assertThisInitialized(_this));\n    _this._checkRange = _this._checkRange.bind(_assertThisInitialized(_this));\n    _this._getWeekNums = _this._getWeekNums.bind(_assertThisInitialized(_this));\n    _this._scrollToSelecetdMonth = _this._scrollToSelecetdMonth.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MonthList, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var isDateUpdated = ['startDate', 'endDate', 'minDate', 'maxDate'].reduce(function (prev, next) {\n        if (prev || nextProps[next] !== _this2.props[next]) {\n          return true;\n        }\n\n        return prev;\n      }, false);\n\n      if (isDateUpdated) {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(this._getMonthList(nextProps))\n        });\n      }\n    }\n  }, {\n    key: \"_renderMonth\",\n    value: function _renderMonth(month) {\n      return React.createElement(Month, _extends({\n        month: month.date || {}\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"_checkRange\",\n    value: function _checkRange(date, start, end) {\n      if (!date || !start) return false;\n      if (!end) return date.year() === start.year() && date.month() === start.month();\n      if (date.year() < start.year() || date.year() === start.year() && date.month() < start.month()) return false;\n      if (date.year() > end.year() || date.year() === end.year() && date.month() > end.month()) return false;\n      return true;\n    }\n  }, {\n    key: \"_shouldUpdate\",\n    value: function _shouldUpdate(month, props) {\n      if (!props) return false;\n      var startDate = props.startDate,\n          endDate = props.endDate;\n      var date = month.date;\n\n      var next = this._checkRange(date, startDate, endDate);\n\n      var prev = this._checkRange(date, this.props.startDate, this.props.endDate);\n\n      if (prev || next) return true;\n      return false;\n    }\n  }, {\n    key: \"_getMonthList\",\n    value: function _getMonthList(props) {\n      var minDate = (props || this.props).minDate.clone().date(1);\n      var maxDate = (props || this.props).maxDate.clone();\n      var monthList = [];\n      if (!maxDate || !minDate) return monthList;\n\n      while (maxDate > minDate || maxDate.year() === minDate.year() && maxDate.month() === minDate.month()) {\n        var month = {\n          date: minDate.clone()\n        };\n        month.shouldUpdate = this._shouldUpdate(month, props);\n        monthList.push(month);\n        minDate.add(1, 'month');\n      }\n\n      return monthList;\n    }\n  }, {\n    key: \"_getWeekNums\",\n    value: function _getWeekNums(start, end) {\n      var clonedMoment = Moment(start),\n          date,\n          day,\n          num,\n          y,\n          m,\n          total = 0;\n\n      while (!clonedMoment.isSame(end, 'months')) {\n        y = clonedMoment.year();\n        m = clonedMoment.month();\n        date = new Date(y, m, 1);\n        day = date.getDay();\n        num = new Date(y, m + 1, 0).getDate();\n        total += Math.ceil((num + day) / 7);\n        clonedMoment.add(1, 'months');\n      }\n\n      return total;\n    }\n  }, {\n    key: \"_scrollToSelecetdMonth\",\n    value: function _scrollToSelecetdMonth() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          startDate = _this$props.startDate,\n          minDate = _this$props.minDate;\n      var monthOffset = 12 * (startDate.year() - minDate.year()) + startDate.month() - minDate.month();\n\n      var weekOffset = this._getWeekNums(minDate, startDate);\n\n      setTimeout(function () {\n        _this3.list && _this3.list.scrollTo({\n          x: 0,\n          y: monthOffset * (24 + 25) + (monthOffset ? weekOffset * Math.ceil(width / 7 + 10) : 0),\n          animated: true\n        });\n      }, 400);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.startDate && this._scrollToSelecetdMonth();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(ListView, {\n        ref: function ref(list) {\n          _this4.list = list;\n        },\n        style: styles.scrollArea,\n        dataSource: this.state.dataSource,\n        renderRow: this._renderMonth,\n        pageSize: 2,\n        initialListSize: 2,\n        showsVerticalScrollIndicator: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return MonthList;\n}(Component);\n\nexport { MonthList as default };","map":{"version":3,"sources":["/Users/szymongruszczynski/Documents/INZYNIERKA/repo_dir/trip-organizer/trip-organizer-rn-app/node_modules/react-native-calendar-select/MonthList.js"],"names":["React","PropTypes","Component","ListView","Moment","styles","Month","Dimensions","get","width","MonthList","props","ds","DataSource","rowHasChanged","r1","r2","shouldUpdate","monthList","state","dataSource","cloneWithRows","_getMonthList","_renderMonth","bind","_shouldUpdate","_checkRange","_getWeekNums","_scrollToSelecetdMonth","nextProps","isDateUpdated","reduce","prev","next","setState","month","date","start","end","year","startDate","endDate","minDate","clone","maxDate","push","add","clonedMoment","day","num","y","m","total","isSame","Date","getDay","getDate","Math","ceil","monthOffset","weekOffset","setTimeout","list","scrollTo","x","animated","scrollArea"],"mappings":"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","sourcesContent":["/**\n * Created by TinySymphony on 2017-05-11.\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport {\n  View,\n  Text,\n  ListView,\n  Dimensions\n} from 'react-native';\nimport Moment from 'moment';\nimport styles from './CalendarStyle';\nimport Month from './Month';\nconst {width} = Dimensions.get('window');\nexport default class MonthList extends Component {\n  constructor (props) {\n    super(props);\n    this.ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => {\n        return r2.shouldUpdate;\n      }\n    });\n    this.monthList = [];\n    this.state = {\n      dataSource: this.ds.cloneWithRows(this._getMonthList())\n    };\n    this._renderMonth = this._renderMonth.bind(this);\n    this._shouldUpdate = this._shouldUpdate.bind(this);\n    this._checkRange = this._checkRange.bind(this);\n    this._getWeekNums = this._getWeekNums.bind(this);\n    this._scrollToSelecetdMonth = this._scrollToSelecetdMonth.bind(this);\n  }\n  componentWillReceiveProps (nextProps) {\n    let isDateUpdated = ['startDate', 'endDate', 'minDate', 'maxDate'].reduce((prev, next) => {\n      if (prev || nextProps[next] !== this.props[next]) {\n        return true;\n      }\n      return prev;\n    }, false);\n    if (isDateUpdated) {\n      this.setState({\n        dataSource:\n          this.state.dataSource.cloneWithRows(this._getMonthList(nextProps))\n      });\n    }\n  }\n  _renderMonth (month) {\n    return (\n      <Month\n        month={month.date || {}}\n        {...this.props}\n      />\n    );\n  }\n  _checkRange (date, start, end) {\n    if (!date || !start) return false;\n    if (!end) return date.year() === start.year() && date.month() === start.month();\n    if (date.year() < start.year() || (date.year() === start.year() && date.month() < start.month())) return false;\n    if (date.year() > end.year() || (date.year() === end.year() && date.month() > end.month())) return false;\n    return true;\n  }\n  _shouldUpdate (month, props) {\n    if (!props) return false;\n    const {\n      startDate,\n      endDate\n    } = props;\n    const {\n      date\n    } = month;\n    let next = this._checkRange(date, startDate, endDate);\n    let prev = this._checkRange(date, this.props.startDate, this.props.endDate);\n    if (prev || next) return true;\n    return false;\n  }\n  _getMonthList (props) {\n    let minDate = (props || this.props).minDate.clone().date(1);\n    let maxDate = (props || this.props).maxDate.clone();\n    let monthList = [];\n    if (!maxDate || !minDate) return monthList;\n    while (maxDate > minDate || (\n      maxDate.year() === minDate.year() &&\n      maxDate.month() === minDate.month()\n    )) {\n      let month = {\n        date: minDate.clone()\n      };\n      month.shouldUpdate = this._shouldUpdate(month, props);\n      monthList.push(month);\n      minDate.add(1, 'month');\n    }\n    return monthList;\n  }\n  _getWeekNums(start, end) {\n    let clonedMoment = Moment(start), date, day, num, y, m, total = 0;\n    while (!clonedMoment.isSame(end, 'months')) {\n      y = clonedMoment.year();\n      m = clonedMoment.month();\n      date = new Date(y, m, 1);\n      day = date.getDay();\n      num = new Date(y, m + 1, 0).getDate();\n      total += Math.ceil((num + day) / 7);\n      clonedMoment.add(1, 'months');\n    }\n    return total;\n  }\n  _scrollToSelecetdMonth () {\n    const {\n      startDate,\n      minDate\n    } = this.props;\n    let monthOffset = 12 * (startDate.year() - minDate.year()) +\n      startDate.month() - minDate.month();\n    let weekOffset = this._getWeekNums(minDate, startDate);\n    setTimeout(() => {\n      this.list && this.list.scrollTo({\n        x: 0,\n        y: monthOffset * (24 + 25) + (monthOffset ? weekOffset * Math.ceil(width / 7 + 10) : 0),\n        animated: true\n      });\n    }, 400);\n  }\n  componentDidMount () {\n    this.props.startDate && this._scrollToSelecetdMonth();\n  }\n  render () {\n    return (\n      <ListView\n        ref={(list) => {this.list = list;}}\n        style={styles.scrollArea}\n        dataSource={this.state.dataSource}\n        renderRow={this._renderMonth}\n        pageSize={2}\n        initialListSize={2}\n        showsVerticalScrollIndicator={false}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}